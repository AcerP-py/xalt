#!/bin/bash
#-*- shell-script -*-
#
#  Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

XALT_DIR=@xalt_dir@
MY_DIR=$(dirname $0)

source $MY_DIR/xalt_helper_functions.sh

########################################################################
#  If the first argument is --part_of_xalt then exit immediately
#  This avoids problems when there are more than one copy of this
#  command in the path.

exit_if_part_of_xalt $1

########################################################################
# Search for the command  and make sure that you don't find this one.

MY_CMD=$(find_real_command $0)

########################################################################
# Make sure that the python setup is valid.  If a user makes PYTHONHOME
# point to a different python then if stmt will be triggered.

find_working_python  # This function sets MY_PYTHON

if [ "$MY_PYTHON" = "broken" ]; then
  echo "XALT: Error in users' python setup.  Please report this error!"
  $MY_CMD "$@"
  exit
fi



########################################################################
# This srun wrapper only tested on one LANL cluster named mustang.
# Very dependent on the site/xalt_find_exec_srun.py python script.
# Because -n option has no environment variable counterpart, we
# decode it below and pass NTASKS onto xalt_find_exec_srun.
# Also, since srun takes "-n4" and "-n 4" as possibilities, had to
# add logic to decode "-n4" syntax.
# 
# Loop over command line arguments to mpirun. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

append=false
prev=
done=false
for option; do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac

  # this if block just to handle "-n4" option -- the "no space" problem 
  # useful with srun on lanl machine
  str=${option:0:2}
  if [ ${#option} -gt 2 ]; then
    str2=${option:2}
    if [[ $str2 = *[[:digit:]]* ]]; then
    # checks if a string is a number, rejects everything else
      if [[ $str == "-n" ]]; then
        NTASKS=$str2 
      elif [[ $str == "-N" ]]; then
        NNODES=$str2 
      fi
    else
      continue
    fi
  fi
  case $option in
    -n|--ntasks)
      prev='NTASKS'
      ;;
    -N)
      prev='NNODES'
      ;;
    --help|-h|--usage|-V|--version)
      $MY_CMD "$@"
      exit
      ;;
    ---test)
      testMe=true
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi
done

# if NTASKS was not set, try to set it
#  if NNODES not set then error
#  else set NTASKS based on various scenarios
if [[ -z "$NTASKS" ]]; then
  if [[ -z "$NNODES" ]]; then
    echo "XALT srun wrapper error: NTASKS not set"
    exit
  elif [[ -z $SLURM_JOBID ]]; then
    # interactive jobs default to one task
    NTASKS=1
  elif [[ $NNODES -eq 1 ]]; then
    # one node jobs default to one task
    NTASKS=1
  else
    # multiple node jobs default to corespernode*nodes
    NTASKS=$(($SLURM_CPUS_ON_NODE*$NNODES))
  fi
fi


FIND_EXEC=$XALT_DIR/site/xalt_find_exec_srun.py

######################################################################
# This function sets the $status variable.

run_real_command "$FIND_EXEC" "$MY_PYTHON" "$NTASKS" "$@"



exit $status
