#!/bin/bash
#-*- shell-script -*-
#
# Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

XALT_DIR=@xalt_dir@

source $XALT_DIR/bin/xalt_helper_functions.sh

########################################################################
#  If the first argument is --part_of_xalt then exit immediately
#  This avoids problems when there are more than one copy of this
#  command in the path.

exit_if_part_of_xalt


########################################################################
# Search for the command  and make sure that you don't find this one.

EXEC_X=/usr/bin/${MY_NAME}.x
MY_CMD=$(find_real_command $0 $EXEC_X)


########################################################################
# Make sure that the python setup is valid.  If a user makes PYTHONHOME
# point to a different python then if stmt will be triggered.

MY_PYTHON=$(find_working_python)

if [ "$MY_PYTHON" = "broken" ]; then
  echo "XALT: Error in users' python setup.  Please report this error!"
  $MY_CMD "$@"
  exit
fi

########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

EXEC="a.out"
append=false
prev=
done=false
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --version|-v|--help)
      $MY_CMD "$@"
      exit
      ;;
    --trace|-t)
      USER_TRACE="true"
      ;;

    --part_of_xalt)
      echo "XALT:YES"
      exit
      ;;

    -o)
      prev='EXEC'
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

done

GEN_ASSEMBLY=$XALT_LIBEXEC_DIR/xalt_generate_assembly.py
GEN_LINKDATA=$XALT_LIBEXEC_DIR/xalt_generate_linkdata.py
SYS_HOST_CMD=$XALT_SITE_DIR/xalt_syshost.py
SYSHOST=$($MY_PYTHON $SYS_HOST_CMD)
PSTREE=@path_to_pstree@
UUIDGEN=@path_to_uuidgen@


UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`
WRKDIR=/tmp/${USER}_${DATESTR}_${UUID}
LINKLINE_OUT=$WRKDIR/link.txt
LINKLINE_ERR=$WRKDIR/link.err
ARGSRC=$WRKDIR/xalt.s
ARGOBJ=$WRKDIR/xalt.o
RESULT=$HOME/.xalt.d/link.${SYSHOST}.${DATESTR}.$UUID.json

if [ ! -d $WRKDIR ]; then
  mkdir -p $WRKDIR
fi

PSTREE_OUT="unknown"
if [ -x "$PSTREE" ]; then
  PSTREE_OUT=$($PSTREE -l -s $$)
fi

EPOCH=$($MY_PYTHON "$GEN_ASSEMBLY" "$UUID" "$SYSHOST" "$PSTREE_OUT" "$ARGSRC")

as $ARGSRC -o $ARGOBJ

#Save python state
PY_PATH_XALT=$PYTHONPATH
PY_HOME_XALT=$PYTHONHOME
export PYTHONPATH=$PY_PATH_ORIG
[ -n "$PY_HOME_ORIG" ] && export PYTHONHOME=$PY_HOME_ORIG

$MY_CMD "$@" $ARGOBJ -t > $LINKLINE_OUT 
status=$?

#Return python state
export PYTHONPATH=$PY_PATH_XALT
unset  PYTHONHOME
[ -n "$PY_HOME_XALT" ] && export PYTHONHOME=$PY_HOME_XALT

if [ -n "$USER_TRACE" ]; then
  cat $LINKLINE_OUT | grep -v $ARGOBJ
fi


$MY_PYTHON "$GEN_LINKDATA" "$UUID" "$STATUS" "`pwd`" "$SYSHOST" "$PSTREE_OUT" "$EXEC" "$ARGOBJ" "$EPOCH" "$LINKLINE_OUT" "$RESULT"

if [ "$?" = 0 -a -n "$XALT_LD_DEBUG" ]; then
   echo ""                       >> $RESULT
   echo "====================="  >> $RESULT
   echo  $MY_CMD "$@" $ARGOBJ    >> $RESULT
   echo "====================="  >> $RESULT

   cat  $LINKLINE >> $RESULT
fi

rm -rf $WRKDIR

exit $status
