VPATH.s     := __build__:util
CC          := gcc
CXX         := g++
CFLAGS      := -g -O0

# Collect information from each module in these four variables.
# Initialize them here as simple variables.

programs     :=
c_sources    :=
cxx_sources  :=
libraries    :=
extra_clean  :=

LIBEXEC      := $(HOME)/t/xalt/3.0/libexec
LIB64        := $(HOME)/t/xalt/3.0/lib64

dependencies = $(subst .c,.d,$(c_sources)) $(subst .C,.d,$(cxx_sources))
objects      = $(subst .c,.o,$(c_sources)) $(subst .C,.o,$(cxx_sources))

include_dirs := __build__ linker util libxalt

CPPFLAGS     += $(addprefix -I, $(include_dirs))

vpath %.h $(include_dirs)

all:

ifeq "$(MAKECMDGOALS)" "clean"
  INCLUDE_DEPS := no
endif

ifeq "$(MAKECMDGOALS)" "clobber"
  INCLUDE_DEPS := no
endif

include linker/Module.mk
include util/Module.mk

ifneq ($(INCLUDE_DEPS),no)
  include $(dependencies)
endif


.PHONY: all
all: $(programs)


echo:
	@echo programs: $(programs)

neat:
	$(RM) linker/*~ util/*~ libxalt/*~ tmpl/*~ *~

clean:
	$(RM) $(objects) $(dependencies)
	$(RM) -rf __build__
	$(RM) linker/*.d.[0-9][0-9]* util/*.d.[0-9][0-9]* libxalt/*.d.[0-9][0-9]* 

clobber:
	$(RM) $(programs) $(libraries)  




%.d: %.c
	@set -e; rm -f $@;                                  \
        $(CC) -MM $(CPPFLAGS) $(CFLAGS) $< > $@.$$$$;       \
        sed 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' < $@.$$$$ > $@; \
        rm -f $@.$$$$

%.d: %.C
	@set -e; rm -f $@;                                  \
        $(CXX) -MM $(CPPFLAGS) $(CXXFLAGS) $< > $@.$$$$;    \
        sed 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' < $@.$$$$ > $@; \
        rm -f $@.$$$$

