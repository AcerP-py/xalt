#!/bin/bash
#-*- shell-script -*-

MY_PATH=$0
MY_NAME=$(basename $MY_PATH)
ARGV="$@"

XALT_DIR=/opt/apps/xalt/xalt
JOB_SUBMIT=$XALT_DIR/bin/xalt_job_submission.py
UUIDGEN=/usr/bin/uuidgen
WHICH_MPI=$XALT_DIR/bin/xalt_which_mpi
SYSHOST=$($XALT_DIR/bin/xalt_syshost.py)

MPI_STACK=$($WHICH_MPI --name)

case "$MPI_STACK" in
  mpich|mpich2)
    FIND_EXEC=$XALT_DIR/bin/xalt_find_exec_mpich.py
    ;;
  openmpi)
    FIND_EXEC=$XALT_DIR/bin/xalt_find_exec_openmpi.py
    ;;
esac

EXEC=unknown
if [ -x "$FIND_EXEC" ]; then
  EXEC=$($FIND_EXEC "$@")

fi

########################################################################
# Search for the command  and make sure that you don't find this one.
# We use "type -p -a" instead of searching the path.  Since bash should
# have search and cached all the executable in the path.  This should be
# faster then walking the path.

for exe in $(type -p -a $MY_NAME); do
  if [ $exe != $MY_PATH ]; then
    MY_CMD=$exe
    break
  fi
done

########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

NTASKS=1
append=false
prev=
done=false
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    shift
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --np|-n)
      prev='NTASKS'
      ;;
    --help|-h)
      $MY_CMD $ARGV
      exit
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

  shift
done


UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`

jobFn=$HOME/.xalt.d/job.${SYSHOST}.${DATESTR}.$UUID.json

sTime=$($JOB_SUBMIT --ntasks $NTASKS --start 0        --fn "$jobFn" -- $EXEC)

$MY_CMD $ARGV

rTime=$($JOB_SUBMIT --ntasks $NTASKS --start "$sTime" --fn "$jobFn" -- $EXEC)
