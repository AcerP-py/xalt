local_dir     	  := libxalt

local_c_src   	  :=                      \
		     buildEnvT.c          \
		     buildUserT.c         \
		     parseProcMaps.c      \
		     run_submission.c     \
		     translate.c          \
		     walkProcessTree.c    \
		     xalt_initialize.c    \
		     xalt_test.c 
local_c_src   	  := $(addprefix $(local_dir)/, $(local_c_src))

LIBXALT_INIT_64   := $(DESTDIR)$(LIB64)/libxalt_init.so
RUN_SUBMISSION_O  := libxalt/run_submission.o            \
                     libxalt/buildEnvT.o                 \
                     libxalt/buildUserT.o                \
                     libxalt/parseProcMaps.o             \
                     libxalt/translate.o                 \
                     libxalt/walkProcessTree.o           \
                     __build__/lex.__XALT_host.o         \
                     __build__/lex.__XALT_path.o         \
                     __build__/lex.xalt_env.o            \
                     __build__/xalt_syshost.o            \
		     util/base64.o                     	 \
		     util/capture.o                   	 \
		     util/compute_sha1.o                 \
	             util/buildJson.o                    \
	             util/buildXALTRecordT.o             \
	             util/build_uuid.o                   \
	             util/epoch.o                        \
	             util/insert.o                       \
	             util/process.o                      \
                     util/transmit.o                     \
                     util/xalt_c_utils.o                 \
                     util/xalt_dir.o                   	 \
                     util/xalt_fgets_alloc.o             \
                     util/xalt_tmpdir.o                	 \
                     util/xalt_vendor_note.o           	 \
                     util/xalt_quotestring.o             \
                     util/zcmprss.o

RUN_SUBMISSION_OBJ:= $(RUN_SUBMISSION_O)                 \
                     $(MY_HOSTNAME_PARSER_OBJ)

LIBXALT_INIT_32   := $(DESTDIR)$(LIB)/libxalt_init.so
RUN_SUBMISSION_O32:= $(patsubst %.o, %.o32, $(RUN_SUBMISSION_O)) \
                     $(MY_HOSTNAME_PARSER_O32)

RUN_SUBMISSION_LIB:= $(DESTDIR)$(LIB64)/librun_submission.a
XALT_INIT_REGULAR := $(DESTDIR)$(LIB64)/xalt_initialize_regular.o
XALT_INIT_MEMTEST := $(DESTDIR)$(LIB64)/xalt_initialize_memtest.o
LIBXALT_OBJ_64    := libxalt/xalt_initialize_preload.o   \
	             $(RUN_SUBMISSION_OBJ)

RUN_SUBMISSION_L32:= $(DESTDIR)$(LIB)/librun_submission.a
XALT_INIT_REG32   := $(DESTDIR)$(LIB)/xalt_initialize_regular.o32
LIBXALT_O32       := libxalt/xalt_initialize_preload.o32   \
	             $(RUN_SUBMISSION_O32)

XALT_INIT_D       := xalt_obfuscate.h xalt_types.h insert.h base64.h       \
                     xalt_quotestring.h xalt_header.h xalt_config.h        \
                     xalt_dir.h xalt_path_parser.h  xalt_hostname_parser.h \
                     xalt_tmpdir.h xalt_vendor_note.h build_uuid.h         \
                     buildXALTRecordT.h

XALT_TEST         := $(DESTDIR)$(LIBEXEC)/xalt_test


BUILD_INIT_32bit_no  :=
BUILD_INIT_32bit_yes := $(XALT_INIT_REG32) $(RUN_SUBMISSION_L32) $(LIBXALT_INIT_32) 



#=====================================================================#
c_sources     	  += $(local_c_src) 
libraries         += $(XALT_INIT_REGULAR) $(LIBXALT_INIT_64) $(RUN_SUBMISSION_LIB) \
                     $(BUILD_INIT_32bit_$(HAVE_32BIT))
programs          += $(XALT_TEST) 
extra_clean       += libxalt/xalt_initialize_preload.o   libxalt/xalt_initialize_regular.o   \
                     libxalt/xalt_initialize_preload.o32 libxalt/xalt_initialize_regular.o32 \

#=====================================================================#

__build__/lex.xalt_env.c: $(CURDIR)/__build__/xalt_env_parser.lex
	flex -P xalt_env -o $@ $^
__build__/lex.__XALT_path.c: $(CURDIR)/__build__/xalt_path_parser.lex
	flex -P __XALT_path -o $@ $^
__build__/lex.__XALT_host.c: $(CURDIR)/__build__/xalt_hostname_parser.lex
	flex -P __XALT_host -o $@ $^

__build__/lex.__XALT_path.o: __build__/lex.__XALT_path.c xalt_obfuscate.h
	$(COMPILE.c)  -Wno-unused-function $(CF_INIT) -o $@ -c $<
__build__/lex.xalt_env.o: __build__/lex.xalt_env.c
	$(COMPILE.c) -Wno-unused-function  -o $@ $^
__build__/lex.__XALT_host.o: __build__/lex.__XALT_host.c xalt_obfuscate.h
	$(COMPILE.c)  -Wno-unused-function $(CF_INIT) -o $@ -c $<


$(LIBXALT_INIT_64): $(LIBXALT_OBJ_64)
	$(LINK.c) $(CFLAGS) $(CF_INIT) $(LIB_OPTIONS) $(LDFLAGS) -L$(DESTDIR)$(LIB64) -o $@  $^ -Wl,-rpath,$(LIB64) $(LIBDCGM) $(LIBNVML) -ldl -lcurl -lz -lm 

libxalt/xalt_initialize_preload.o: libxalt/xalt_initialize.c $(XALT_INIT_D)
	$(COMPILE.c) $(CPPFLAGS) $(CF_INIT) -Wno-unused-variable -DSTATE=LD_PRELOAD -DIDX=0 -o $@ -c $<

$(XALT_INIT_REGULAR): libxalt/xalt_initialize.c $(XALT_INIT_D)
	$(COMPILE.c) $(CPPFLAGS) $(CF_INIT) -Wno-unused-variable -DSTATE=REGULAR -DIDX=1 -o $@ -c $<
$(RUN_SUBMISSION_LIB): $(RUN_SUBMISSION_OBJ)
	$(AR) $(ARFLAGS) $@ $^

$(XALT_TEST): libxalt/xalt_test.o $(RUN_SUBMISSION_LIB)
	$(LINK.c) $(CFLAGS) $(CF_INIT) $(LDFLAGS) -o $@ $^ $(LIBDCGM) $(LIBNVML) -ldl -lcurl -lm -lz

#----------------------------------------------------------------------
#  32 bit 
#----------------------------------------------------------------------

$(LIBXALT_INIT_32): $(LIBXALT_O32)
	$(LINK.c) -m32 $(CFLAGS) $(CF_INIT) $(LIB_OPTIONS) $(LDFLAGS) -L$(DESTDIR)$(LIB) -o $@  $^ $(LIBDCGM) $(LIBNVML) -ldl -lcurl -lm

libxalt/xalt_initialize_preload.o32: libxalt/xalt_initialize.c $(XALT_INIT_D)
	$(COMPILE.c) -m32 $(CPPFLAGS) $(CF_INIT) -Wno-unused-variable -DSTATE=LD_PRELOAD -DIDX=0 -o $@ -c $<

$(XALT_INIT_REG32): libxalt/xalt_initialize.c $(XALT_INIT_D)
	$(COMPILE.c) -m32 $(CPPFLAGS) $(CF_INIT) -Wno-unused-variable -DSTATE=REGULAR    -DIDX=1 -o $@ -c $<

__build__/lex.__XALT_path.o32: __build__/lex.__XALT_path.c xalt_obfuscate.h
	$(COMPILE.c)  -m32 -Wno-unused-function $(CF_INIT) -o $@ -c $<
__build__/lex.xalt_env.o32: __build__/lex.xalt_env.c
	$(COMPILE.c)  -m32 -Wno-unused-function  -o $@ $^
__build__/lex.__XALT_host.o32: __build__/lex.__XALT_host.c xalt_obfuscate.h
	$(COMPILE.c)  -m32 -Wno-unused-function $(CF_INIT) -o $@ -c $<

$(RUN_SUBMISSION_L32): $(RUN_SUBMISSION_O32)
	$(AR) $(ARFLAGS) $@ $^

