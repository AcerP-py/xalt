#!/usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os, sys, re, time, datetime, argparse, ConfigParser, base64, MySQLdb
#from xalt_util import *

class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--dryrun",       dest='dryrun',       action="store_true",  default = None,          help="dryrun")
    parser.add_argument("--dbname",       dest='dbname',       action="store",       default = "xalt",        help="db name")
    args = parser.parse_args()
    return args


def dbConfigFn(dbname):
  """
  Build config file name from dbname.
  @param dbname: db name
  """
  return dbname + "_db.conf"


def fix_record(cursor, acctT, endtimeT):
  query = "select run_id, job_id, account, start_time, end_time from xalt_run"
  cursor.execute(query)

  n_update = 0
  for run_id, job_id, account, start_time, end_time in cursor:
    chargeAcct = acctT.get(job_id)
    if (chargeAcct and chargeAcct != account):
      n_update += 1
      cursor.execute("START TRANSACTION")
      query = "update xalt_run set account = %s where run_id = %s"
      cursor.execute(query, (chargeAcct, run_id))
      cursor.execute("COMMIT")
   
    end_time = float(end_time)
    if (end_time < 1.0):
      start_time  = float(start_time)
      n_update   += 1
      run_time    = "%.2f" % max(endtimeT[job_id] - start_time, 0.0)
      cursor.execute("START TRANSACTION")
      query = "update xalt_run set run_time = %s where run_id = %s"
      cursor.execute(query, (run_time, run_id))
      cursor.execute("COMMIT")
      

  print("updated",n_update,"records")
  cursor.execute("COMMIT")

def read_tacc_acct_records():
  acctT    = {}
  endtimeT = {}

  fn = "tacc_jobs_completed"
  f = open(fn,"r")
  for line in f:
    fieldA          = line.split(":")
    jobId           = fieldA[0]
    chargeAcct      = fieldA[2]
    acctT[jobId]    = chargeAcct
    endtimeT[jobId] = fieldA[5]

  f.close()
  return acctT, endtimeT


def main():
  args     = CmdLineOptions().execute()
  config   = ConfigParser.ConfigParser()     
  configFn = dbConfigFn(args.dbname)
  config.read(configFn)

  conn = MySQLdb.connect \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")), \
          config.get("MYSQL","DB"))
  cursor = conn.cursor()

  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  acctT, endtimeT = read_tacc_acct_records()

  fix_record(cursor, acctT, endtimeT)
  

if ( __name__ == '__main__'): main()
  



