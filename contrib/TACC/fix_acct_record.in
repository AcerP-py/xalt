#!/usr/bin/env python
# -*- python -*-

from __future__ import print_function
import os, sys, re, time, datetime, argparse, ConfigParser, base64, MySQLdb
from xalt_util import *

class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--dryrun",       dest='dryrun',       action="store_true",  default = None,          help="dryrun")
    parser.add_argument("--dbname",       dest='dbname',       action="store",       default = "xalt",        help="db name")
    args = parser.parse_args()
    return args


def dbConfigFn(dbname):
  """
  Build config file name from dbname.
  @param dbname: db name
  """
  return dbname + "_db.conf"


def fix_acct_record(acctT):
  #cursor.execute("START TRANSACTION")
  query = "select run_id, job_id, account from xalt_run where date > '2015-08-14' limit 50"
  cursor.execute(query)

  n_update = 0
  for run_id, job_id, account in cursor:
    chargeAcct = acctT[job_id]
    if (chargeAcct != account):
      n_update += 1
      print("old: ",account,"new:",chargeAcct)

      #query = "update xalt_run set account = %s where run_id = %s"
      #cursor.execute(query, (chargeAcct, run_id))

  #cursor.execute("COMMIT")
def update_module_name(args, tableName, idName, pathName, reverseMapT, cursor):

  cursor.execute("START TRANSACTION")
  query = "Select %s, %s from %s where module_name is NULL " % (
    idName, pathName, tableName)

  if (args.syshost is not None):
    query = query + " AND syshost = '%s'" % args.syshost

  if (args.exclude_path is not None):
    for path in args.exclude_path:
      query = query + " AND %s not like '%%%s%%'" % (pathName, path)
  
  cursor.execute(query)
  resultA  = cursor.fetchall()
  n_update = 0
  for idx, path in resultA:
    module_name = obj2module(path, reverseMapT)
    if (module_name != 'NULL'):
      n_update += 1
      if (args.dryrun):
        print ('path    : ' + path)
        print ('index   : ' + str(idx))
        print ('module  : ' + module_name)
        print ('SQL     : ' + query)
        print ('')
      else:
        query = "update "+tableName+" set module_name = %s where "+idName+" = %s" 
        cursor.execute(query, ( module_name, idx))
  if (args.dryrun):
    print ('Found %d entries out of %d to update' % (n_update, len(resultA)))
  else:
    cursor.execute("COMMIT")
    print ('Updated %d entries out of %d objects' % (n_update, len(resultA)))
  

def read_tacc_acct_records():
  acctT = {}

  fn = "tacc_jobs_completed"
  f = open(fn,"r")
  for line in f:
    fieldA       = line.split(":")
    jobId        = fieldA[0]
    chargeAcct   = fieldA[2]
    acctT[jobId] = chargeAcct

  f.close()
  return acctT


def main():
  args     = CmdLineOptions().execute()
  config   = ConfigParser.ConfigParser()     
  configFn = dbConfigFn(args.dbname)
  config.read(configFn)

  conn = MySQLdb.connect \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")), \
          config.get("MYSQL","DB"))
  cursor = conn.cursor()

  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  acctT = read_tacc_acct_records()

  fix_acct_record(acctT)
  

if ( __name__ == '__main__'): main()
  



