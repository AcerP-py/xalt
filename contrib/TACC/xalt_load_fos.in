#!/bin/sh
# -*- python -*-

################################################################################
# This file is python 2/3 bilingual. 
# The line """:" starts a comment in python and is a no-op in shell.
""":"
# Shell code to find and run a suitable python interpreter.
for cmd in python3 python python2; do
   command -v > /dev/null $cmd && exec $cmd $0 "$@"
done

echo "Error: Could not find a valid python interpreter --> exiting!" >&2
exit 2
":""" # this line ends the python comment and is a no-op in shell.
################################################################################

from __future__    import print_function
import os, sys, re, argparse, base64, json, MySQLdb

try:
  import configparser
except:
  import ConfigParser as configparser

dirNm, execName = os.path.split(os.path.realpath(sys.argv[0]))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../libexec")))
sys.path.insert(1,os.path.realpath(os.path.join(dirNm, "../site")))

class CmdLineOptions(object):
  """ Command line Options class """

  def __init__(self):
    """ Empty Ctor """
    pass
  
  def execute(self):
    """ Specify command line arguments and parse the command line"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--confFn",     dest='confFn',    action="store",       default = "xalt_db.conf", help="db name")
    parser.add_argument("--mapFn",      dest='mapFn',     action="store",       default = "xalt_db.conf", help="map file")
    args = parser.parse_args()
    return args


def main():
  XALT_ETC_DIR = os.environ.get("XALT_ETC_DIR","./")
  args         = CmdLineOptions().execute()
  config       = configparser.ConfigParser()     
  configFn     = os.path.join(XALT_ETC_DIR,args.confFn)
  config.read(configFn)

  conn = MySQLdb.connect              \
         (config.get("MYSQL","HOST"), \
          config.get("MYSQL","USER"), \
          base64.b64decode(config.get("MYSQL","PASSWD")).decode(), \
          config.get("MYSQL","DB"))
  cursor = conn.cursor()

  try:
    cursor.execute("""
          CREATE TABLE IF NOT EXISTS `xalt_field_of_science` (
          `fos_id`           int(11)        unsigned NOT NULL auto_increment,
          `account`          varchar(20)             NOT NULL,
          `field_of_science` varchar(80)             NOT NULL,
          `directorate`      varchar(80)             NOT NULL,
          PRIMARY KEY (`fos_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8  COLLATE=utf8_bin AUTO_INCREMENT=1
        """)

    query  = 'USE '+ config.get("MYSQL","DB")
    conn.query(query)
    query  = 'START TRANSACTION'
    conn.query(query)
    query  = ""

    # Read in map file and convert to python table.
    fh           = open(args.mapFn,"r")
    directorateT = json.loads(fh.read())
    fh.close()
    for chgStr in directorateT:
      fos         = directorateT[chgStr]['fos']
      directorate = directorateT[chgStr]['directorate']

      query = "SELECT fos_id from xalt_field_of_science where account=%s"
      cursor.execute(query, [chgStr])
      query = ""
      if (cursor.rowcount > 0):
        continue

      query = "INSERT into xalt_field_of_science VALUES(NULL, %s, %s, %s)"
      cursor.execute(query, (chgStr, fos, directorate))
      query = ""

    query = "COMMIT"
    conn.query(query)
    query = ""
      
    conn.close()

  except  MySQLdb.Error as e:
    print(query.encode("ascii","ignore"),file=sys.stderr)
    print ("Error %d: %s" % (e.args[0], e.args[1]),file=sys.stderr)
    print(traceback.format_exc())
    sys.exit (1)



if ( __name__ == '__main__'): main()
