THIS_DIR   := $(PARENT_DIR)/libuuid/src
VPATH       = .:$(THIS_DIR)
CFLAGS     := -fPIC $(OPTLVL) 
CC   	   := gcc
SRC  	   := clear.c compare.c copy.c gen_uuid.c isnull.c pack.c parse.c predefined.c test_uuid.c unpack.c \
	      unparse.c uuid_time.c randutils.c
OBJS 	   := $(patsubst %.c, %.o, $(SRC))

LIBUUID    := $(DESTDIR)$(LIB)/libuuid.a
MY_UUIDGEN := $(DESTDIR)$(BIN)/my_uuidgen

all: $(LIBUUID) 

build_uuidgen: $(MY_UUIDGEN)

$(LIBUUID) : $(OBJS)
	ar r $@ $^
	ranlib $@

$(MY_UUIDGEN): my_uuidgen.o $(LIBUUID)
	$(LINK.c) -o $@ $< $(LIBUUID)

test_uuid: test_uuid.o $(LIBUUID)
	$(LINK.c) -o $@ $< $(LIBUUID)
neat:
	$(RM) *~
clean: neat
	$(RM) *.o
clobber: clean
	$(RM) test_uuid $(MY_UUIDGEN) $(LIBUUID)
distclean: clobber
	$(RM) makefile config.log config.status uuid_config.h

my_uuidgen.o: my_uuidgen.c uuid.h
clear.o: clear.c uuidP.h
compare.o: compare.c uuidP.h
copy.o: copy.c uuidP.h
isnull.o: isnull.c uuidP.h
pack.o: pack.c uuidP.h
parse.o: parse.c uuidP.h
predefined.o: predefined.c uuidP.h
unpack.o: unpack.c uuidP.h
unparse.o: unparse.c uuidP.h
uuid_time.o:  uuid_time.c uuidP.h
gen_uuid.o: gen_uuid.c all-io.h uuidP.h uuidd.h randutils.h strutils.h c.h
