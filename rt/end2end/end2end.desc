# -*- python -*-

test_name = "end2end"
test_descript = {
   'description' : "End to end test",
   'keywords'    : [ "simple", test_name,],

   'active'      : True,
   'test_name'   : test_name,

   'run_script'  : """
     . $(projectDir)/rt/common_funcs.sh

     initialize

     rm -rf XALT

     VERSION=`cat $(projectDir)/.version`
      
     installXALT --with-syshostConfig=nth_name:2 --prefix=$(outputDir)/XALT/$VERSION --with-siteControlledPrefix=yes
     displayThis "buildRmapT"
     buildRmapT

     rm -rf get_XALT_env hello* hybrid_daxpy map.log omp_pi results.csv "xalt tools" u2acct.json
     mkdir "xalt tools"
     export PROMPT_COMMAND2="printf '\033k${formed_hostname}\033\\';"
     XALT_BIN=$outputDir/XALT/$VERSION/bin
     PATH="$XALT_BIN:$outputDir/XALT/$VERSION/sbin:$outputDir/xalt tools:$PATH";


     displayThis "installDB"
     installDB 


     echo '{ "mclay": "A-xyzzy" }' > u2acct.json

     displayThis "module commands"
     module --quiet rm $LMOD_FAMILY_MPI $LMOD_FAMILY_COMPILER
     module --quiet load gcc mpich

   
     export XALT_DIR=$(outputDir)/XALT/$VERSION 
     export COMPILER_PATH=$XALT_BIN
     export SBATCH_ACCOUNT=rtm
     export SLURM_JOB_ID=12345
     export XALT_EXECUTABLE_TRACKING=yes
     export XALT_TRANSMISSION_STYLE=file_separate_dirs
     export XALT_PRELOAD_ONLY=no

     displayThis  "mpicc -o hello\ .mpi $(projectDir)/rt/mpi_hello_world.c"
     mpicc -o hello\ .mpi $(projectDir)/rt/mpi_hello_world.c 

     export PATH_PATSQ="I am end2end's variable with utf8 chars: ñèéï¿¡¤â¢ª¯±ç·å£§µ×þÐ¬øØ€αβγ"
     
     displayThis "mpirun -n 1 ./hello\ .mpi --abc def --seq 01"
     mpirun -n 1 ./hello\ .mpi --abc def --seq 01
     
     displayThis "mpicc -o Ðì®/helloñ $(projectDir)/rt/mpi_hello_world.c"
     rm -rf Ðì®
     mkdir  Ðì®
     mpicc -o helloñ.mpi -Wl,--print-map $(projectDir)/rt/mpi_hello_world.c > map.log 2>&1
     mv helloñ.mpi Ðì®

     displayThis "mpirun -n 1 Ðì®/helloñ.mpi --seq 02"
     mpirun -n 1 Ðì®/helloñ.mpi --seq 02
     
     displayThis "Setting LD_PRELOAD, XALT_TRACING=yes ./hello\ .mpi --seq 03"
     export LD_PRELOAD=$outputDir/XALT/$VERSION/lib64/libxalt_init.so
     LD_BIND_NOW=1 XALT_TRACING=yes ./hello\ .mpi --ntasks p "a';'d" --seq 03
     
     g++ -o try.rd $(testDir)/try.C -rdynamic

     displayThis "XALT_TRACING=yes ./try.rd --seq 04 > try.log 2>&1"
     XALT_TRACING=yes ./try.rd --seq 04 > try.PRELOAD.log 2>&1

     displayThis "XALT_TRACING=yes LD_PRELOAD= ./try.rd --seq 05 > try.log 2>&1"
     LD_PRELOAD= XALT_TRACING=yes ./try.rd --seq 05 > try.REGULAR.log 2>&1

     export XALT_PRELOAD_ONLY=yes
     displayThis "build empty_regexp"
     gcc -o empty_regexp $(testDir)/empty_regexp.c 
     displayThis "run empty_regexp --seq 06"
     ./empty_regexp  --seq 06

     displayThis "build try_uuid and run it (seq 07)"
     gcc -o try_uuid $(testDir)/try_uuid.c -luuid
     ./try_uuid '`i+1`' --seq 07

     displayThis "mpicc -o helloññ $(projectDir)/rt/mpi_hello_world.c"
     mpicc -o helloññ $(projectDir)/rt/mpi_hello_world.c
     
     displayThis "mpirun -n 1 ./helloññ --seq 08"
     export RTM_PATH="RTM path FOO"
     mpirun -n 1 ./helloññ --seq 08

     displayThis "Disable XALT TRACKING"
     displayThis "mpicc -o helloñññ $(projectDir)/rt/mpi_hello_world.c"
     unset XALT_EXECUTABLE_TRACKING
     mpicc -o helloñññ $(projectDir)/rt/mpi_hello_world.c

     displayThis "Enable XALT TRACKING"
     displayThis "XALT_TRACING=yes ./helloñññ" '`i+1`' "a;'" "--seq 09"
     export XALT_EXECUTABLE_TRACKING=yes
     XALT_TRACING=yes ./helloñññ '`i+1`' "a;'" --seq 09

     displayThis "Turn off command line recording for: mpirun -n 1 ./hello\ .mpi --abc def --seq 10"
     export XALT_CMDLINE_RECORD=no
     mpirun -n 1 ./hello\ .mpi --abc def --seq 10
     unset XALT_CMDLINE_RECORD

     displayThis "XALT_SCALAR_TRACKING=no ./helloñññ --noseq 11"
     XALT_SCALAR_TRACKING=no ./helloñññ --noseq 11

     displayThis "gfortran -fopenmp -o omp_pi"
     gfortran -fopenmp -o omp_pi $(testDir)/omp_pi.f90

     displayThis "OMP_NUM_THREADS=4 ./omp_pi --seq 11"
     OMP_NUM_THREADS=4 ./omp_pi --seq 11

     displayThis "mpif90 -fopenmp -o hybrid_daxpy"
     mpif90 -fopenmp -o hybrid_daxpy $(testDir)/hybrid_daxpy.f90
     

     displayThis "OMP_NUM_THREADS=2 ./mpirun -n 2 ./hybrid_daxpy --seq 12"
     OMP_NUM_THREADS=2  mpirun -n 2 ./hybrid_daxpy --seq 12

     displayThis "XALT_TRACING=link gcc -o get_XALT_env $(testDir)/get_XALT_env.c"
     XALT_TRACING=link gcc -o get_XALT_env $(testDir)/get_XALT_env.c
     displayThis "./get_XALT_env --seq 13"
     ./get_XALT_env --seq 13

     gcc -fPIC -c -o a.o $(testDir)/a.c
     gcc -fPIC -c -o b.o $(testDir)/b.c
     gcc -fPIC -c -o c.o $(testDir)/c.c
     
     displayThis "Build shared library"
     gcc -o libabc.so -fPIC -shared a.o b.o c.o

     gcc -O0 -c -o abc.o $(testDir)/abc.c

     displayThis "Link abc with libabc.so"
     gcc -O0 -o abc abc.o -L$PWD -labc
     
     displayThis "XALT_TRACING=yes ./abc --seq 14 > /dev/null"
     LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH XALT_TRACING=yes ./abc --seq 14 > /dev/null

     gcc -O2 -flto -c -o foo.o  $(testDir)/foo.c
     gcc -O2 -flto -c -o bar.o  $(testDir)/bar.c
     gcc -O2 -flto -c -o main.o $(testDir)/main.c

     displayThis "Testing linking w/ -flto"
     gcc -O2 -flto -o my_flto main.o foo.o bar.o 

     displayThis "test_record_pkg --seq 15"
     $(outputDir)/XALT/$VERSION/libexec/test_record_pkg --seq 15

     displayThis "build and run segv program (seq 16)"
     mpicc -o segv $(testDir)/segv.c
     mpirun -n 2 ./segv --seq 16

     displayThis "build and run fpe program (seq 17)"
     gcc -o fpe $(testDir)/fpe.c
     ./fpe --seq 17

     displayThis "build and run bus program (seq 18)"
     gcc -o bus $(testDir)/bus.c
     ./bus --seq 18

     displayThis "build and run ill program (seq 19)"
     gcc -o ill $(testDir)/ill.c
     ./ill --seq 19

     displayThis "Test python3 package recording"
     PYTHONPATH=$XALT_DIR/site_packages:$PYTHONPATH
     PYTHONPATH=${PYTHONPATH%:}

     python3 $(testDir)/pkg_tracking.py
   
     unset PYTHONPATH

     displayThis "mv xalt_run_submission xalt_run_submission.orig; ./hello\ .mpi --seq 20"
     mv XALT/$VERSION/libexec/xalt_run_submission XALT/$VERSION/libexec/xalt_run_submission.orig

     XALT_TRACING=yes ./hello\ .mpi --seq 20

     unset LD_PRELOAD
     displayThis "Extract Watermark"
     xalt_extract_record libabc.so
   
     export XALT_USERS="$USER;$outputDir"

     SYSHOST=`xalt_syshost`
     displayThis "SYSHOST: $SYSHOST"

     displayThis "xalt_file_to_db.py"
     xalt_file_to_db.py  --syshost $SYSHOST --confFn $DB_CONF_FN --u2acct u2acct.json --reverseMapD $outputDir/reverseMapD

     check_entries_db.py --dbname $DBNAME --results results.csv --functions 4 --links 16 --runs 19 --pkgs 3
     finishTest -o $(resultFn) -t $(runtimeFn) results.csv
     if [ -f results.csv ]; then
       STATUS=`cat results.csv`; 
     else
       STATUS=failed
     fi
     echo; echo STATUS=$STATUS; echo
   """,

   'tests' : [
      { 'id' : 't1', 'tol' : 1.01e-6},
   ],
}
