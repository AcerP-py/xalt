# -*- python -*-

test_name = "end2end"

test_descript = {
   'description' : "End to end test",
   'keywords'    : [ "simple", test_name,],

   'active'      : True,
   'test_name'   : test_name,

   'run_script'  : """
     . $(projectDir)/rt/common_funcs.sh

     initialize

     installXALT
     displayThis "buildRmapT"
     buildRmapT

     export PROMPT_COMMAND2="printf '\033k${formed_hostname}\033\\';"


     displayThis "installDB"
     installDB 

     displayThis "module commands"
     module --quiet rm $LMOD_FAMILY_MPI $LMOD_FAMILY_COMPILER
     module --quiet load gcc mpich
     PATH=$outputDir/XALT/bin:$outputDir/XALT/sbin:$PATH;

     export XALT_EXECUTABLE_TRACKING=yes
     export XALT_DISABLE_BACKGROUNDING=yes

     displayThis  "mpicc -o hello $(projectDir)/rt/mpi_hello_world.c"
     mpicc -o hello $(projectDir)/rt/mpi_hello_world.c 

     export PATH_PATSQ="I am end2end's variable with utf8 chars: ñèéï¿¡¤â¢ª¯±ç·å£§µ×þÐ¬øØ€αβγ"
     
     displayThis "mpirun -n 1 ./hello"
     mpirun -n 1 ./hello 
     
     displayThis "mpicc -o Ðì®/helloñ $(projectDir)/rt/mpi_hello_world.c"
     rm -rf Ðì®
     mkdir  Ðì®
     mpicc -o helloñ -Wl,--print-map $(projectDir)/rt/mpi_hello_world.c > map.log 2>&1
     mv helloñ Ðì®

     displayThis "mpirun -n 1 Ðì®/helloñ"
     mpirun -n 1 Ðì®/helloñ
     
     displayThis "Setting LD_PRELOAD, ./hello"
     export LD_LIBRARY_PATH=$outputDir/XALT/lib64:$outputDir/XALT/lib:$LD_LIBRARY_PATH
     export LD_PRELOAD=libxalt_init.so
     ./hello
     
     
     displayThis "Setting direct2db; mpicc -o helloññ $(projectDir)/rt/mpi_hello_world.c"
     export XALT_TRANSMISSION_STYLE=direct2db
     mpicc -o helloññ $(projectDir)/rt/mpi_hello_world.c
     
     displayThis "mpirun -n 1 ./helloññ"
     export RTM_PATH="RTM path FOO"
     mpirun -n 1 ./helloññ

     displayThis "Disable XALT TRACKING"
     displayThis "mpicc -o helloñññ $(projectDir)/rt/mpi_hello_world.c"
     unset XALT_EXECUTABLE_TRACKING
     mpicc -o helloñññ $(projectDir)/rt/mpi_hello_world.c

     displayThis "Enable XALT TRACKING"
     displayThis "./helloñññ"
     export XALT_TRANSMISSION_STYLE=file
     export XALT_EXECUTABLE_TRACKING=yes
     ./helloñññ


     displayThis "gfortran -fopenmp -o omp_pi"
     gfortran -fopenmp -o omp_pi $(testDir)/omp_pi.f90

     displayThis "OMP_NUM_THREADS=4 ./omp_pi"
     OMP_NUM_THREADS=4 ./omp_pi

     displayThis "mpif90 -fopenmp -o hybrid_daxpy"
     mpif90 -fopenmp -o hybrid_daxpy $(testDir)/hybrid_daxpy.f90
     

     displayThis "OMP_NUM_THREADS=2 ./mpirun -n 2 ./hybrid_daxpy"
     OMP_NUM_THREADS=2  mpirun -n 2 ./hybrid_daxpy


     g++ -o try.rd $(testDir)/try.C -rdynamic

     displayThis "XALT_TRACING=yes ./try.rd > try.log 2>&1"
     XALT_TRACING=yes ./try.rd > try.log 2>&1


     displayThis "xalt_file_to_db"
     unset LD_PRELOAD
     export XALT_USERS="$USER;$outputDir"

     xalt_file_to_db  --confFn $DB_CONF_FN --reverseMapD $outputDir/reverseMapD

     check_entries_db.py --dbname $DBNAME --results result.csv --runs 8 --functions 4 --links 6
     finishTest -o $(resultFn) -t $(runtimeFn) result.csv
     STATUS=`cat result.csv`; echo; echo STATUS=$STATUS; echo
   """,

   'tests' : [
      { 'id' : 't1', 'tol' : 1.01e-6},
   ],
}
