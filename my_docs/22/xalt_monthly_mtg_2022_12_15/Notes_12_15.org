Notes for 12/15 XALT Meeting Presentation: Package tracking:

R tracking is done by including R package tracking (better name)

Python tracking is done by putting xalt's sitecustomize.py in
$PYTHONPATH

Rule:
Don't send anything on the "wire" that you don't have to.

* The way that R packages and Python packages are tracked are by an import hook
** That is when the import statement is run.
** XALT code captures that and generates a package record.
** There is special code that written for R and another for Python
** This special code executes $XALT_DIR/libexec/xalt_record_pkg like this:

$XALT_DIR/libexec/xalt_record_pkg program          <PROGRAM> \
                                  xalt_run_uuid    <UUID>    \
                                  package_name     <NAME>    \
                                  package_version  <VERSION> \
                                  package_path     <PATH>


In Python <NAME> or <PATH> might be marked as the string '<unknown>'.
But if both would be "<unknown>" then no record is produced.

* How XALT handles these records
** XALT writes all package records temporarily to /dev/shmem (if it exists or /tmp otherwise) for all package records. 
** If this particular run is NOT sampled then at the end the records are removed from /dev/shmem
** If this particular run is sampled then at the end the records are put on the "wire"

* This way no package records are written on the "wire" if the python or R execution is not being sampled.

* Do we wish to record every python/R package?
** Probably not

* Python Filtering:
** This filtering is done by xalt_sitecustomize.py -> installed as...
Here are some of the rules we use:
  path : r"^[^/]"       # SKIP all built-in packages
  name : r"^_"          # SKIP names that start with a underscore
  name : r".*\."        # SKIP all names that are divided with periods: a.b.c
  path :  r".*/.local/" # KEEP all packages installed by users
** None of the records that match are even written to /dev/shmem

* Total Filtering:
** Filtering can by XALTdb.py (when loading into DB).  It uses a flex routine to filter both Python and R programs
pkg_patterns = [
  ["SKIP",  r'^R:name:stats'],         # SKIP the R pkg named stats
  ["SKIP",  r'^R:name:base'],          # SKIP the R pkg named base
  ["SKIP",  r'^R:name:methods'],       # SKIP the R pkg named methods
  ["SKIP",  r'^python:name:_.*'],      # SKIP all python name that start with an underscore
  ["SKIP",  r'^python:path:[^/].*'],   # SKIP all python built-in packages
  ["SKIP",  r'^python:path:\/home'],   # SKIP all python package in user locations
]

* Improvement:
** do the same filtering before shipping Json python records over "wire"

* There is an opportunity to filter pkg records between end of job and writting on the wire.
Maybe knowing all the records could afford better filtering.
Need suggestions.
