package         := xalt
prefix          := @prefix@
XALT_DIR        := @prefix@
PATH_TO_UUIDGEN := @PATH_TO_UUIDGEN@
PATH_TO_AS      := @PATH_TO_AS@
BUILD_PSTREE    := @BUILD_PSTREE@
USE_ARGPARSE    := @USE_CONTRIB_ARGPARSE@

LIBEXEC         := $(prefix)/libexec
SITE            := $(prefix)/site
BIN             := $(prefix)/bin
SBIN            := $(prefix)/sbin
DIRLIST         := $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(SITE)  $(DESTDIR)$(BIN) \
                   $(DESTDIR)$(SBIN) 

BIN_PKG         := src/ld.in src/mpirun.in src/ibrun.in


SBIN_PKG        := src/conf_create.in.py  src/createDB.in.py        \
                   src/xalt_db.conf       src/xalt_json_to_db.in.py

LIBEXEC_PKG     := src/xalt_generate_assembly.in.py  src/xalt_generate_linkdata.in.py \
                   src/xalt_run_submission.in.py     src/xalt_parse_mpirun_args.in.py \
                   src/util.py                       src/XALTdb.py 

SITE_PKG        := src/xalt_find_exec_mpich.in.py    src/xalt_find_exec_openmpi.in.py \
	           src/xalt_which_mpi.in             src/xalt_syshost.in.py           \
                   src/new_job_id.in.py              src/SitePkg.py


.PHONY:

all:
	@echo done

install:  $(DIRLIST) Inst_site Inst_sbin Inst_bin Inst_libexec \
          Build_pstree_$(BUILD_PSTREE) Use_argparse_$(USE_ARGPARSE)

$(DIRLIST) :
	mkdir -p $@

Inst_site: $(SITE_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(SITE)    __installMe

Inst_libexec: $(LIBEXEC_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe

Inst_sbin: $(SBIN_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(SBIN)    __installMe

Inst_bin: $(BIN_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(BIN)     __installMe

Build_pstree_no:

Build_pstree_yes:
	@echo building_pstree

Use_argparse_no:

Use_argparse_yes: contrib/argparse/argparse.py
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe




__installMe:
	-for i in $(FILELIST); do                                     	   \
           bareN=$${i##*/};                                           	   \
           fn=$${bareN%%.in*};                                        	   \
           ext=$${bareN#*.};                                          	   \
           oext=;                                                          \
           [ "$$ext" = "in.py" ] && oext=".py";                            \
           sed  -e 's|@PREFIX@|$(prefix)|g'                            	   \
	        -e 's|@xalt_dir@|$(XALT_DIR)|g'                 	   \
	        -e 's|@path_to_as@|$(PATH_TO_AS)|g'                        \
	        -e 's|@path_to_uuidgen@|$(PATH_TO_UUIDGEN)|g'              \
                           < $$i > $(DIRLOC)/$$fn$$oext;                   \
            [ "$$ext" = "in" -o "$$ext" = "in.py" ] &&                     \
               chmod +x $(DIRLOC)/$$fn$$oext;                              \
	    true;                                                          \
        done

gittag:
        ifneq ($(TAG),)
	  @git status -s > /tmp/gittag$$$$;                                \
          if [ -s /tmp/gittag$$$$ ]; then                                  \
	    echo "All files not checked in => try again";                  \
	  else                                                             \
	    echo "$(TAG)" >                                      .version; \
            git commit -m "moving to TAG_VERSION $(TAG)"         .version; \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'         ; \
	    git push --tags                                              ; \
          fi;                                                              \
          rm -f /tmp/gittag$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif

makefile: Makefile.in config.status
	./config.status $@
